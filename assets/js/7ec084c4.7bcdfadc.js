"use strict";(self.webpackChunkaerospace_jam=self.webpackChunkaerospace_jam||[]).push([[6227],{3066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"getting-started/adding-a-route/adding-a-route","title":"Adding a Route","description":"We have sensors reporting data to our WebUI, but now we need to be able to send data from the WebUI back to the Pico.","source":"@site/docs/getting-started/adding-a-route/adding-a-route.md","sourceDirName":"getting-started/adding-a-route","slug":"/getting-started/adding-a-route/","permalink":"/getting-started/adding-a-route/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"description":"We have sensors reporting data to our WebUI, but now we need to be able to send data from the WebUI back to the Pico."},"sidebar":"tutorialSidebar","previous":{"title":"Adding a Sensor","permalink":"/getting-started/adding-a-sensor/"},"next":{"title":"Appendix","permalink":"/getting-started/appendix/"}}');var o=n(4848),s=n(8453);const a={sidebar_position:7,description:"We have sensors reporting data to our WebUI, but now we need to be able to send data from the WebUI back to the Pico."},i="Adding a Route",d={},c=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"adding-a-route",children:"Adding a Route"})}),"\n",(0,o.jsx)(t.p,{children:"Now that we've gotten our sensors up and running, we need to be able to send data from the WebUI back to the Pico. To do so, we can add a custom HTTP path, which calls a function on your Pico when it is called and can return some custom data to the WebUI. You can add a route to the server with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:'from aerospacejam import AerospaceJamServer, response_html, response_json\r\nimport json\r\n# ...trimmed for brevity\r\npico_server = AerospaceJamServer(WIFI_CONFIG)\r\n# ...trimmed for brevity\r\n\r\ndef hello_handler(request):\r\n    print("Someone said hello!")\r\n    return response_html("<h1>Hello, world!</h1>")\r\npico_server.register_path(\'/hello\', hello_handler)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Then, when you go to the Pico's static IP (by default, ",(0,o.jsx)(t.code,{children:"192.168.4.1"}),"), you can get the response from this from ",(0,o.jsx)(t.code,{children:"http://192.168.4.1/hello"}),". It will also log to the ",(0,o.jsx)(t.code,{children:"Shell"})," window in Thonny:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-txt",children:"Got a request from ('192.168.4.16', 53165)\r\nSomeone said hello!\n"})}),"\n",(0,o.jsx)(t.p,{children:"Note that this is actually causing code on the Pico to be executed as it recieves the request - so we can change this to do certain things when you were to, say, click a button. In the WebUI's HTML, if you were to add:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",children:'<script>\r\n    function send_message() {\r\n        fetch("/message", {\r\n            method: "post",\r\n            headers: {\r\n                \'Accept\': \'application/json\',\r\n                \'Content-Type\': \'application/json\'\r\n            },\r\n\r\n            body: JSON.stringify({\r\n                message: "Hello, world!"\r\n            })\r\n        })\r\n        .then( (response) => { \r\n            console.log("Sent!");\r\n        });\r\n    }\r\n<\/script>\r\n<button onclick="send_message()">Send Message To Pico</button>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["When the button is clicked, it will send a request to ",(0,o.jsx)(t.code,{children:"/message"})," on the Pico. If you were to add the following handler code to the Pico:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:"# First, define a function for the handler itself\r\ndef message_handler(request):\r\n    # Then, convert the JSON's text to an actual Python object\r\n    data = json.loads(request.body)\r\n    # Then, we can do whatever we want with the object. For instance, since we defined the key `message: \"Hello, world!\"` in the WebUI's JavaScript,\r\n    # we can access it with data['message']:\r\n    print(\"Recieved a message:\")\r\n    print(data['message'])\r\n    # Now, we have to return a response of some kind. Since there's no real response to return, we can just return a JSON object saying that the\r\n    # request was a success.\r\n    return response_json({\"status\": \"OK\"})\r\n# And finally, we register this function as a message handler.\r\npico_server.register_path('/message', message_handler)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);