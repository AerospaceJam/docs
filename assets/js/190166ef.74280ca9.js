"use strict";(self.webpackChunkaerospace_jam=self.webpackChunkaerospace_jam||[]).push([[7873],{3359:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"challenges/color/color","title":"Spectrometer (AS7341)","description":"","source":"@site/docs/challenges/color/color.md","sourceDirName":"challenges/color","slug":"/challenges/color/","permalink":"/challenges/color/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"description":""},"sidebar":"tutorialSidebar","previous":{"title":"RFID (RC522)","permalink":"/challenges/rfid/"},"next":{"title":"Additional Resources","permalink":"/category/additional-resources"}}');var t=i(4848),o=i(8453);const s={sidebar_position:5,description:""},a="Spectrometer (AS7341)",l={},c=[{value:"Wiring",id:"wiring",level:2},{value:"Code",id:"code",level:2},{value:"Installing required libraries",id:"installing-required-libraries",level:3},{value:"Example code",id:"example-code",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"spectrometer-as7341",children:"Spectrometer (AS7341)"})}),"\n",(0,t.jsx)(n.h2,{id:"wiring",children:"Wiring"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Source files for this diagram are available ",(0,t.jsx)(n.a,{href:"https://github.com/AerospaceJam/aerospacejam.github.io/blob/main/docs/challenges/color/color.fzz",children:"here"})]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Wiring diagram",src:i(2651).A+"",width:"876",height:"858"})}),"\n",(0,t.jsx)(n.p,{children:"In case the above image is unclear, here's an additional schematic of the wiring as to prevent confusion:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Wiring schematic",src:i(135).A+"",width:"681",height:"780"})}),"\n",(0,t.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,t.jsx)(n.h3,{id:"installing-required-libraries",children:"Installing required libraries"}),"\n",(0,t.jsx)(n.p,{children:"In order to use the RFID reader with your Pico, you'll first need to install a module."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["For future reference, you should note down in your codebase's ",(0,t.jsx)(n.code,{children:"README.md"})," the dependencies that your code requires."]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Open Thonny and connect to your Pico."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the shell at the bottom of the window, type in the following commands to connect to your Wi-Fi network, replacing ",(0,t.jsx)(n.code,{children:"SSID"})," and ",(0,t.jsx)(n.code,{children:"PASSWORD"})," with your network's name and password:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'import network\r\nwlan = network.WLAN(network.STA_IF)\r\nwlan.active(True)\r\nwlan.connect("SSID","PASSWORD")\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Now, run the following commands to install the required package:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'import mip\r\nmip.install("github:AHSPC/AS7341_micropython/as7341.py")\r\nmip.install("github:AHSPC/adafruit_i2c_device_micropython/i2c_device.py")\r\nmip.install("github:adafruit/Adafruit_CircuitPython_Register/adafruit_register/i2c_bit.py")\r\nmip.install("github:adafruit/Adafruit_CircuitPython_Register/adafruit_register/i2c_bits.py")\r\nmip.install("github:adafruit/Adafruit_CircuitPython_Register/adafruit_register/i2c_struct.py")\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-code",children:"Example code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from machine import SoftI2C, Pin\r\nfrom as7341 import AS7341\r\n\r\ni2c = SoftI2C(sda=Pin(0), scl=Pin(1))\r\nsensor = AS7341(i2c)\r\n\r\n# ----- Example usage -----\r\n# sensor.get_readings()\r\n# > {'violet': 9, 'cyan': 39, 'yellow': 106, 'blue': 32, 'red': 103, 'orange': 142, 'green': 75, 'indigo': 21}\r\n\r\n# sensor.led = True\r\n# sensor.get_readings()\r\n# sensor.led = False\r\n# > {'violet': 284, 'cyan': 1993, 'yellow': 3930, 'blue': 1944, 'red': 4275, 'orange': 5525, 'green': 2422, 'indigo': 1196}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},2651:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/color_bb-a1adca4885ff1358a225f9d8153dbd96.png"},135:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/color_schem-dcb80d37d01ada7bc72b2815741627de.png"},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(6540);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);